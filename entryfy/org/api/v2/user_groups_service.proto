syntax = "proto3";

package entryfy.org.api.v2;
import "google/protobuf/timestamp.proto";

option go_package = "pkg/entryfy/org/api/v2";
option java_multiple_files = true;
option java_package = "com.entryfy.org.api.v2";
option csharp_namespace = "Entryfy.Org.Api.V2";
option ruby_package = "Entryfy::Org::Api::V2";

service UserGroupsService {
  rpc GetUserGroups (GetUserGroupsRequest) returns (GetUserGroupsResponse) {
  }
  rpc CreateUserGroups (CreateUserGroupsRequest) returns (CreateUserGroupsResponse) {
  }
  rpc UpdateUserGroups (UpdateUserGroupsRequest) returns (UpdateUserGroupsResponse) {
  }
  rpc DeleteUserGroups (DeleteUserGroupsRequest) returns (DeleteUserGroupsResponse) {
  }

  rpc GetUserGroupSets (GetUserGroupSetsRequest) returns (GetUserGroupSetsResponse) {
  }
  rpc CreateUserGroupSets (CreateUserGroupSetsRequest) returns (CreateUserGroupSetsResponse) {
  }
  rpc UpdateUserGroupSets (UpdateUserGroupSetsRequest) returns (UpdateUserGroupSetsResponse) {
  }
  rpc DeleteUserGroupSets (DeleteUserGroupSetsRequest) returns (DeleteUserGroupSetsResponse) {
  }
}

// Main UserGroup entity that is returned upon create/update/get operations
message UserGroup {
  string uuid = 1;
  string name = 2;
  string description = 3;
  map<string, string> preferences = 4;
  repeated string user_uuids = 5;
  google.protobuf.Timestamp created_at = 6;
  google.protobuf.Timestamp updated_at = 7;
}

// Main UserGroupSet entity that is returned upon create/update/get operations
message UserGroupSet {
  string uuid = 1;
  string name = 2;
  string description = 3;
  map<string, string> preferences = 4;
  repeated string user_group_uuids = 5;
  google.protobuf.Timestamp created_at = 6;
  google.protobuf.Timestamp updated_at = 7;
}

message GetUserGroupsRequest {
  string organization_slug = 1;
  repeated string uuids = 2; // Non-mandatory: get only groups with specified UUIDs
}

message GetUserGroupsResponse {
  repeated UserGroup user_groups = 1;
}

message DeleteUserGroupsRequest {
  string organization_slug = 1;
  repeated string uuids = 2; // Mandatory list of group UUIDs to delete
}

message DeleteUserGroupsResponse {

}

message CreateUserGroupsRequest {
  message UserGroupBody {
    string uuid = 1; // Would be auto-generated by the system if not set
    string name = 2;
    string description = 3;
    map<string, string> preferences = 4;
    repeated string user_uuids = 5;
  }
  string organization_slug = 1;
  repeated UserGroupBody user_group_bodies = 2;
}

message CreateUserGroupsResponse {
  repeated UserGroup user_groups = 1;
}

message UpdateUserGroupsRequest {
  message UserGroupBody {
    string uuid = 1; // Mandatory
    string name = 2;
    string description = 3;
    map<string, string> preferences = 4;
    repeated string user_uuids = 5;
  }
  string organization_slug = 1;
  repeated UserGroupBody user_group_bodies = 2;
}

message UpdateUserGroupsResponse {
  repeated UserGroup user_groups = 1;
}

message GetUserGroupSetsRequest {
  string organization_slug = 1;
  repeated string uuids = 2; // Non-mandatory: get only group sets with specified UUIDs
}

message GetUserGroupSetsResponse {
  repeated UserGroupSet user_group_sets = 1;
}

message DeleteUserGroupSetsRequest {
  string organization_slug = 1;
  repeated string uuids = 2; // Mandatory list of group set UUIDs to delete
}

message DeleteUserGroupSetsResponse {

}

message CreateUserGroupSetsRequest {
  message UserGroupSetBody {
    string uuid = 1; // Would be auto-generated by the system if not set
    string name = 2;
    string description = 3;
    map<string, string> preferences = 4;
    repeated string user_group_uuids = 5;
  }
  string organization_slug = 1;
  repeated UserGroupSetBody user_group_set_bodies = 2;
}

message CreateUserGroupSetsResponse {
  repeated UserGroupSet user_group_sets = 1;
}

message UpdateUserGroupSetsRequest {
  message UserGroupSetBody {
    string uuid = 1; // Mandatory
    string name = 2;
    string description = 3;
    map<string, string> preferences = 4;
    repeated string user_group_uuids = 5;
  }
  string organization_slug = 1;
  repeated UserGroupSetBody user_group_set_bodies = 2;
}

message UpdateUserGroupSetsResponse {
  repeated UserGroupSet user_group_sets = 1;
}
